<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The grave of brain cells</title>
  
  
  <link href="https://cccckv.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://cccckv.github.io/blog/"/>
  <updated>2022-03-23T09:50:07.037Z</updated>
  <id>https://cccckv.github.io/blog/</id>
  
  <author>
    <name>ccccckw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>获取随机数</title>
    <link href="https://cccckv.github.io/blog/2022/03/23/%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>https://cccckv.github.io/blog/2022/03/23/%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0/</id>
    <published>2022-03-23T08:00:49.000Z</published>
    <updated>2022-03-23T09:50:07.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取随机数-include-lt-stdlib-h-gt"><a href="#获取随机数-include-lt-stdlib-h-gt" class="headerlink" title="获取随机数 #include &lt;stdlib.h&gt;"></a>获取随机数 #include &lt;stdlib.h&gt;</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">//srand(10); //设置种子</span><br><span class="line">//int a = rand(); //rand()获取随机数</span><br><span class="line"></span><br><span class="line">int t = time(NULL); //time函数获得当前时间  s</span><br><span class="line">srand(t); //设置随机种子</span><br><span class="line">int a = rand();</span><br><span class="line">printf(&quot;%d\n&quot;, a);</span><br><span class="line">int b = rand();</span><br><span class="line">printf(&quot;%d\n&quot;, b);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="猜数字小游戏"><a href="#猜数字小游戏" class="headerlink" title="猜数字小游戏"></a>猜数字小游戏</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">//srand(10); //设置种子</span><br><span class="line">//int a = rand(); //rand()获取随机数</span><br><span class="line">int t = time(NULL); //time函数获得当前时间  s</span><br><span class="line">srand(t); //设置随机种子</span><br><span class="line">    int randNum[4]; // 存储生成的随机数组</span><br><span class="line">    int stdinNum[4]; // 存储输入的数组</span><br><span class="line">    int num; // 存储输入的数组</span><br><span class="line">    int n; // 用户输入正确的数量</span><br><span class="line"></span><br><span class="line">    // 将生成的随机数存入数组</span><br><span class="line">    for (int i = 0; i &lt; 4; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        randNum[i] = rand()%10;</span><br><span class="line">        printf(&quot;%d&quot;,randNum[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;请输入一个四位数字\n&quot;);</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;num); //输入数字</span><br><span class="line">        if (num&gt;9999||num&lt;1000) // 对输入数字进行判断</span><br><span class="line">        &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        // 将输入数字存为数组</span><br><span class="line">        stdinNum[0]=(num/1000)%10;</span><br><span class="line">        stdinNum[1]=(num/100)%10;</span><br><span class="line">        stdinNum[2]=(num/10)%10;</span><br><span class="line">        stdinNum[3]=num%10;</span><br><span class="line">        n = 0;</span><br><span class="line">        // 判断输入数字是否正确</span><br><span class="line">        for (int i = 0; i &lt; 4; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            if(randNum[i]==stdinNum[i])</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;第%d位数字正确\n&quot;,i+1);</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">            if (randNum[i]&gt;stdinNum[i])</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;第%d位数字小了\n&quot;,i+1);</span><br><span class="line">            &#125;</span><br><span class="line">            if(randNum[i]&lt;stdinNum[i])</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;第%d位数字大了\n&quot;,i+1);</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        // 全部数字正确则跳出循环</span><br><span class="line">        if (n==4)</span><br><span class="line">        &#123;</span><br><span class="line">            Sleep(1000);</span><br><span class="line">            sleep(1);</span><br><span class="line">            printf(&quot;全部猜对了&quot;);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;获取随机数-include-lt-stdlib-h-gt&quot;&gt;&lt;a href=&quot;#获取随机数-include-lt-stdlib-h-gt&quot; class=&quot;headerlink&quot; title=&quot;获取随机数 #include &amp;lt;stdlib.h&amp;gt;&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>scanf和库函数</title>
    <link href="https://cccckv.github.io/blog/2022/03/23/scanf%E8%AF%BB%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://cccckv.github.io/blog/2022/03/23/scanf%E8%AF%BB%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-03-23T07:02:17.000Z</published>
    <updated>2022-03-23T07:59:43.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scanf读取字符串"><a href="#scanf读取字符串" class="headerlink" title="scanf读取字符串"></a>scanf读取字符串</h2><h4 id="缺点：遇到空格会提前结束读取，如果存放读取字符的空间不足，继续向后存放，会造成内存污染"><a href="#缺点：遇到空格会提前结束读取，如果存放读取字符的空间不足，继续向后存放，会造成内存污染" class="headerlink" title="缺点：遇到空格会提前结束读取，如果存放读取字符的空间不足，继续向后存放，会造成内存污染"></a>缺点：遇到空格会提前结束读取，如果存放读取字符的空间不足，继续向后存放，会造成内存污染</h4><p><img src="/blog/img/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%92%8C%E6%95%B0%E7%BB%84%E5%90%8D.png" alt="avatar"></p><h2 id="gets（）；"><a href="#gets（）；" class="headerlink" title="gets（）；"></a>gets（）；</h2><h3 id="gets是一个库函数，从键盘读取字符串"><a href="#gets是一个库函数，从键盘读取字符串" class="headerlink" title="gets是一个库函数，从键盘读取字符串"></a>gets是一个库函数，从键盘读取字符串</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    char ch[128] = &quot;&quot;;</span><br><span class="line">    //scanf(&quot;%s\n&quot;,ch);</span><br><span class="line">    printf(&quot;%s\n&quot;,ch);</span><br><span class="line">    //gets遇到\n结束，遇到空格不结束</span><br><span class="line">    //gets也会造成内存污染</span><br><span class="line">    gets(ch);//括号中要的是存放读取字符串的地址</span><br><span class="line">    printf(&quot;%s&quot;,ch);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="fgets"><a href="#fgets" class="headerlink" title="fgets();"></a>fgets();</h2><h3 id="库函数，从键盘读取一个字符串"><a href="#库函数，从键盘读取一个字符串" class="headerlink" title="库函数，从键盘读取一个字符串"></a>库函数，从键盘读取一个字符串</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">char num[128];</span><br><span class="line">fgets(num, sizeof(num),stdin); //fgets从 stdin(标准输入-键盘) 读取字符串到num数组中，最大可以读取sizeof(num)-1个字符</span><br><span class="line">num[strlen(num)-1] = &#x27;/0&#x27;</span><br><span class="line">printf(&quot;%s\n&quot;,num);</span><br></pre></td></tr></table></figure><h3 id="fgets-会读取-n"><a href="#fgets-会读取-n" class="headerlink" title="fgets 会读取\n"></a>fgets 会读取\n</h3><h4 id="strlen-库函数。测字符数组有效字符个数-include-lt-string-h-gt"><a href="#strlen-库函数。测字符数组有效字符个数-include-lt-string-h-gt" class="headerlink" title="strlen(); 库函数。测字符数组有效字符个数 #include &lt;string.h&gt;"></a>strlen(); 库函数。测字符数组有效字符个数 #include &lt;string.h&gt;</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//处理\n</span><br><span class="line">char buf[128] = &quot;hello\n&quot;;</span><br><span class="line">//找到最后一个字符的下标</span><br><span class="line">int i = 0;</span><br><span class="line">while(buf[i] != &#x27;\0&#x27;)&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">//此处while相当于 i=strlen(buf);</span><br><span class="line">printf(&quot;%d\n&quot;,i);</span><br><span class="line">buf[i-1] = &#x27;\0&#x27;;</span><br><span class="line">printf(&quot;%s\n&quot;,buf);</span><br><span class="line">return 0;</span><br></pre></td></tr></table></figure><h2 id="puts-fputs"><a href="#puts-fputs" class="headerlink" title="puts(); \ fputs();"></a>puts(); \ fputs();</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">char buf[] = &quot;helloworld&quot;;</span><br><span class="line">printf(&quot;%s\m&quot;,buf);</span><br><span class="line">puts(buf); //数组首元素地址，有换行</span><br><span class="line">fputs(buf,stdout); //第一个参数是数组首元素地址，stdout为标准输出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;scanf读取字符串&quot;&gt;&lt;a href=&quot;#scanf读取字符串&quot; class=&quot;headerlink&quot; title=&quot;scanf读取字符串&quot;&gt;&lt;/a&gt;scanf读取字符串&lt;/h2&gt;&lt;h4 id=&quot;缺点：遇到空格会提前结束读取，如果存放读取字符的空间不足，继续向后</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="https://cccckv.github.io/blog/2022/03/22/%E6%95%B0%E7%BB%84/"/>
    <id>https://cccckv.github.io/blog/2022/03/22/%E6%95%B0%E7%BB%84/</id>
    <published>2022-03-22T02:49:17.000Z</published>
    <updated>2022-03-23T07:59:41.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="将若干个相同数据类型的变量存放在一个连续的内存空间"><a href="#将若干个相同数据类型的变量存放在一个连续的内存空间" class="headerlink" title="将若干个相同数据类型的变量存放在一个连续的内存空间"></a>将若干个相同数据类型的变量存放在一个连续的内存空间</h3><h3 id="数组的最小单位是-元素"><a href="#数组的最小单位是-元素" class="headerlink" title="数组的最小单位是 元素"></a>数组的最小单位是 元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int num[10] = &#123;0,1,5,2,3,6,4,7,8,9&#125;;</span><br><span class="line"></span><br><span class="line">int arr[10];</span><br><span class="line">for(int i = 0; i &lt; sizeof(arr)/sizeof(arr[0]); i++)&#123;</span><br><span class="line">printf(&quot;%d\n&quot;,arr[i]);//输出随机值，各个系统可能不一样</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int num[10] = &#123;1,2&#125;; //初始化部分元素，其他元素将被初始化为0</span><br><span class="line">int num[10] = &#123;0&#125;; //将所有元素初始化为0</span><br><span class="line">int num[] = &#123;0，1，2，3，4，5&#125; //定义时没有定义大小，数组元素个数将由&#123;&#125;中的个数决定</span><br><span class="line">int num[]; // err </span><br></pre></td></tr></table></figure><h2 id="数组大小"><a href="#数组大小" class="headerlink" title="数组大小"></a>数组大小</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int num[10] = &#123;0,1,2,3,4,5,6,7,8,9&#125;;</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(num));  //40</span><br><span class="line">//求元素个数</span><br><span class="line">int n = sizeof(num)/sizeof(num[0]);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="启动一个程序，系统会给这个程序分配一块内存空间，内存的最小单位是一个字节，每个字节都会有一个编号，这就是内存地址。"><a href="#启动一个程序，系统会给这个程序分配一块内存空间，内存的最小单位是一个字节，每个字节都会有一个编号，这就是内存地址。" class="headerlink" title="启动一个程序，系统会给这个程序分配一块内存空间，内存的最小单位是一个字节，每个字节都会有一个编号，这就是内存地址。"></a>启动一个程序，系统会给这个程序分配一块内存空间，内存的最小单位是一个字节，每个字节都会有一个编号，这就是内存地址。</h3><h3 id="数据在内存中的地址，是它在内存中的起始地址。"><a href="#数据在内存中的地址，是它在内存中的起始地址。" class="headerlink" title="数据在内存中的地址，是它在内存中的起始地址。"></a>数据在内存中的地址，是它在内存中的起始地址。</h3><h2 id="数组在内存中的存储"><a href="#数组在内存中的存储" class="headerlink" title="数组在内存中的存储"></a>数组在内存中的存储</h2><p><img src="/blog/img/%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%98%E5%82%A8.png" alt="avatar"></p><h3 id="数组的地址和数组名"><a href="#数组的地址和数组名" class="headerlink" title="数组的地址和数组名"></a>数组的地址和数组名</h3><h4 id="int-a-10"><a href="#int-a-10" class="headerlink" title="int a[10]"></a>int a[10]</h4><h4 id="数组名a-等价于第0个元素的地址。"><a href="#数组名a-等价于第0个元素的地址。" class="headerlink" title="数组名a 等价于第0个元素的地址。"></a>数组名a 等价于第0个元素的地址。</h4><h4 id="数组名是常量，不能被赋值。"><a href="#数组名是常量，不能被赋值。" class="headerlink" title="数组名是常量，不能被赋值。"></a>数组名是常量，不能被赋值。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int arr[5];</span><br><span class="line">printf(&quot;%u\n&quot;,&amp;a[0]);</span><br><span class="line">printf(&quot;%u\n&quot;,a);</span><br><span class="line">printf(&quot;%u\n&quot;,&amp;a);</span><br><span class="line"></span><br><span class="line">printf(&quot;%u\n&quot;,&amp;a[0]+1);</span><br><span class="line">printf(&quot;%u\n&quot;,a+1);</span><br><span class="line">printf(&quot;%u\n&quot;,&amp;a+1);</span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="二维数组在内存中地址是连续的"><a href="#二维数组在内存中地址是连续的" class="headerlink" title="二维数组在内存中地址是连续的"></a>二维数组在内存中地址是连续的</h3><h3 id="二维数组初始化"><a href="#二维数组初始化" class="headerlink" title="二维数组初始化"></a>二维数组初始化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">//给二维数组部分元素初始化，其他元素默认为0</span><br><span class="line">    int arr[3][4] = &#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125;;</span><br><span class="line">    int arr[3][4] = &#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;;</span><br><span class="line">    int arr[3][4] = &#123;1,2,3&#125;;</span><br><span class="line">    int arr[][] = &#123;1,2,3,4,5,6&#125;;//err 二维数组定义不可省略列下标，行下标可省略</span><br><span class="line">    for (int i = 0; i &lt; 3; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int j = 0; j &lt; 4; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%d &quot;,arr[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求二维数组行、列值"><a href="#求二维数组行、列值" class="headerlink" title="求二维数组行、列值"></a>求二维数组行、列值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    int arr[3][4] = &#123;1,2,3,4,5&#125;;</span><br><span class="line">    int num = sizeof(arr)/sizeof(arr[0][0]);//元素个数</span><br><span class="line">    int rowNum = sizeof(arr)/sizeof(arr[0]);//行数 = 二维数组总大小/一行大小</span><br><span class="line">    int cloumNum = sizeof(arr[0])/sizeof(arr[0][0]); //列数 = 行大小/元素大小</span><br><span class="line">    return 0；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组和数组名"><a href="#二维数组和数组名" class="headerlink" title="二维数组和数组名"></a>二维数组和数组名</h3><h4 id="二维数组数组名代表首行地址"><a href="#二维数组数组名代表首行地址" class="headerlink" title="二维数组数组名代表首行地址"></a>二维数组数组名代表首行地址</h4><p><img src="/blog/img/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%92%8C%E6%95%B0%E7%BB%84%E5%90%8D.png" alt="avatar"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    int arr[3][4] = &#123;1,2,3,4,5&#125;;</span><br><span class="line"></span><br><span class="line">    printf(&quot;%u\n&quot;,&amp;arr[0][0]);</span><br><span class="line">    printf(&quot;%u\n&quot;,arr[0]);</span><br><span class="line">    printf(&quot;%u\n&quot;,&amp;arr[0]);</span><br><span class="line">    printf(&quot;%u\n&quot;,arr);</span><br><span class="line">    printf(&quot;%u\n&quot;,&amp;arr);</span><br><span class="line"></span><br><span class="line">    printf(&quot;%u\n&quot;,&amp;arr[0][0] + 1);</span><br><span class="line">    printf(&quot;%u\n&quot;,arr[0] + 1);</span><br><span class="line">    printf(&quot;%u\n&quot;,&amp;arr[0] + 1);</span><br><span class="line">    printf(&quot;%u\n&quot;,arr + 1);</span><br><span class="line">    printf(&quot;%u\n&quot;,&amp;arr + 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int arr[2][3][4]=&#123;</span><br><span class="line">&#123;&#123;1,2,3,4&#125;</span><br><span class="line">,&#123;2,1,3,4&#125;</span><br><span class="line">,&#123;5,1,4,2&#125;</span><br><span class="line">&#125;</span><br><span class="line">,&#123;&#123;&#125;,&#123;&#125;,&#123;&#125;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    //“hello”</span><br><span class="line">    //字符数组</span><br><span class="line">char arr[5] = &#123;&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;\0&#x27;&#125;;//有\0字符的字符数组，操作起来方便(字符串)</span><br><span class="line">    char a[5] = &#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;&#125;;//普通的字符数组</span><br><span class="line">    for (int i = 0; i &lt; sizeof(a)/sizeof(a[0]); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c\n&quot;,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%s\n&quot;,a);</span><br><span class="line">    char a1[5] = &quot;abcd&quot;;//定义了一个字符数组，存的是abcde\0</span><br><span class="line">    printf(&quot;%s\n&quot;,a1);</span><br><span class="line">    char a2 = &#x27;a&#x27;;</span><br><span class="line">    putchar(a2);</span><br><span class="line"></span><br><span class="line">    char a3[] = &#123;&#x27;1&#x27;,&#x27;2&#x27;,&#x27;c&#x27;,&#x27;f&#x27;&#125;;</span><br><span class="line">    printf(&quot;%s\n&quot;,a3);//乱码 因为需要以\0结尾</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串追加"><a href="#字符串追加" class="headerlink" title="字符串追加"></a>字符串追加</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* 字符串追加</span><br><span class="line">*/</span><br><span class="line">int main()&#123;</span><br><span class="line">    char str1[128] = &quot;hello&quot;;</span><br><span class="line">    char str2[128] = &quot;123456&quot;;</span><br><span class="line">    int i = strlen(str1);</span><br><span class="line">    int j = 0;</span><br><span class="line">    while (str2[j]!=0)</span><br><span class="line">    &#123;</span><br><span class="line">        str1[i] = str2[j];</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    puts(str1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;h3 id=&quot;将若干个相同数据类型的变量存放在一个连续的内存空间&quot;&gt;&lt;a href=&quot;#将若干个相同数据类型的变量存放在一个连续的内存空间&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常用限定符</title>
    <link href="https://cccckv.github.io/blog/2022/03/22/%E5%B8%B8%E7%94%A8%E9%99%90%E5%AE%9A%E7%AC%A6/"/>
    <id>https://cccckv.github.io/blog/2022/03/22/%E5%B8%B8%E7%94%A8%E9%99%90%E5%AE%9A%E7%AC%A6/</id>
    <published>2022-03-22T00:48:26.000Z</published>
    <updated>2022-03-22T00:54:11.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">extern 声明，(告诉编译器有这个东西，不开辟空间)</span><br><span class="line"></span><br><span class="line">const 定义一个常量，修饰内容不可改变</span><br><span class="line"></span><br><span class="line">volatile 防止编译器优化代码</span><br><span class="line"></span><br><span class="line">Reguster 建议将变量定义在寄存器中</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;限定符&quot;&gt;&lt;a href=&quot;#限定符&quot; class=&quot;headerlink&quot; title=&quot;限定符&quot;&gt;&lt;/a&gt;限定符&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>printf及char</title>
    <link href="https://cccckv.github.io/blog/2022/03/21/printf/"/>
    <id>https://cccckv.github.io/blog/2022/03/21/printf/</id>
    <published>2022-03-21T08:08:19.000Z</published>
    <updated>2022-03-22T01:31:48.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整数printf-格式"><a href="#整数printf-格式" class="headerlink" title="整数printf();格式"></a>整数printf();格式</h2><h3 id="d-有符号打印int"><a href="#d-有符号打印int" class="headerlink" title="%d 有符号打印int"></a>%d 有符号打印int</h3><h3 id="u-无符号打印int"><a href="#u-无符号打印int" class="headerlink" title="%u 无符号打印int"></a>%u 无符号打印int</h3><h3 id="hd-有符号打印short"><a href="#hd-有符号打印short" class="headerlink" title="%hd 有符号打印short"></a>%hd 有符号打印short</h3><h3 id="hu-无符号打印short"><a href="#hu-无符号打印short" class="headerlink" title="%hu 无符号打印short"></a>%hu 无符号打印short</h3><h3 id="ld-有符号打印long"><a href="#ld-有符号打印long" class="headerlink" title="%ld 有符号打印long"></a>%ld 有符号打印long</h3><h3 id="lu-无符号打印long"><a href="#lu-无符号打印long" class="headerlink" title="%lu 无符号打印long"></a>%lu 无符号打印long</h3><h2 id="sizeof关键字-测量数据类型大小"><a href="#sizeof关键字-测量数据类型大小" class="headerlink" title="sizeof关键字 测量数据类型大小"></a>sizeof关键字 测量数据类型大小</h2><h3 id="printf-“-d-n”-sizeof-int"><a href="#printf-“-d-n”-sizeof-int" class="headerlink" title="printf(“%d\n”,sizeof(int));"></a>printf(“%d\n”,sizeof(int));</h3><h2 id="char-字符存到内存中的是字符对应的ascii值-。ascii-最大值127。"><a href="#char-字符存到内存中的是字符对应的ascii值-。ascii-最大值127。" class="headerlink" title="char (字符存到内存中的是字符对应的ascii值 。ascii 最大值127。)"></a>char (字符存到内存中的是字符对应的ascii值 。ascii 最大值127。)</h2><h3 id="c-打印ascii值对应的字符"><a href="#c-打印ascii值对应的字符" class="headerlink" title="%c 打印ascii值对应的字符"></a>%c 打印ascii值对应的字符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">char ch = &#x27;a&#x27;;</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(ch));  // -&gt;1</span><br><span class="line">printf(&quot;%d\n&quot;,sizeof(&#x27;a&#x27;));  // -&gt;4  ==&gt; printf(&quot;%d\n&quot;,sizeof(97))；</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">char ch = &#x27;a&#x27;;</span><br><span class="line">int num = &#x27;a&#x27; - &#x27; &#x27;;//求A的ascii值</span><br><span class="line">int num2 = &#x27;A&#x27; + &#x27; &#x27;；</span><br><span class="line"></span><br><span class="line">char ch2 = &#x27;8&#x27;;</span><br><span class="line">int num3 = &#x27;8&#x27; - &#x27;0&#x27;;// 将数字字符转成数字</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="从键盘读取字符-回车（-n）-算一个字符-‘-n’-10"><a href="#从键盘读取字符-回车（-n）-算一个字符-‘-n’-10" class="headerlink" title="从键盘读取字符 (回车（\n） 算一个字符 ‘\n’=10 )"></a>从键盘读取字符 (回车（\n） 算一个字符 ‘\n’=10 )</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">char ch = 0;</span><br><span class="line">char num = 0;</span><br><span class="line">scanf(&quot;%c&quot;, &amp;ch);</span><br><span class="line">printf(&quot;%c\n&quot;, ch);</span><br><span class="line">scanf(&quot;%c&quot;, &amp;ch); //不加此句将无法分次读取字符</span><br><span class="line">scanf(&quot;%c&quot;,num);</span><br><span class="line">printf(&quot;%c\n&quot;, num);</span><br><span class="line"></span><br><span class="line">ch = getchar();//相当于scanf(&quot;%c&quot;, &amp;ch);</span><br><span class="line"></span><br><span class="line">char ch = &#x27;a&#x27;;</span><br><span class="line">putchar(ch); //输出ch字符 &#x27;a&#x27;  (不会换行) -&gt;printf(&quot;%c\n&quot;,ch);</span><br><span class="line">printf(&quot;%d\n&quot;,ch); // 输出ch字符值 97</span><br></pre></td></tr></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p><img src="/blog/img/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6.png" alt="avatar"></p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="字符串常量后会加一个-0（’-0’ascii值为0）"><a href="#字符串常量后会加一个-0（’-0’ascii值为0）" class="headerlink" title="字符串常量后会加一个\0（’\0’ascii值为0）"></a>字符串常量后会加一个\0（’\0’ascii值为0）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%s\n&quot;,&quot;abc&quot;); //在内存中实际上是&quot;abc\0&quot;-&gt;&quot;9798990&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;整数printf-格式&quot;&gt;&lt;a href=&quot;#整数printf-格式&quot; class=&quot;headerlink&quot; title=&quot;整数printf();格式&quot;&gt;&lt;/a&gt;整数printf();格式&lt;/h2&gt;&lt;h3 id=&quot;d-有符号打印int&quot;&gt;&lt;a href=&quot;#d-有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>float double</title>
    <link href="https://cccckv.github.io/blog/2022/03/21/%E6%B5%AE%E7%82%B9%E5%9E%8B/"/>
    <id>https://cccckv.github.io/blog/2022/03/21/%E6%B5%AE%E7%82%B9%E5%9E%8B/</id>
    <published>2022-03-21T08:08:19.000Z</published>
    <updated>2022-03-21T09:31:16.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="float保证精度到小数点后6位"><a href="#float保证精度到小数点后6位" class="headerlink" title="float保证精度到小数点后6位"></a>float保证精度到小数点后6位</h2><h2 id="double保证精度到小数点后14位"><a href="#double保证精度到小数点后14位" class="headerlink" title="double保证精度到小数点后14位"></a>double保证精度到小数点后14位</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">double a = 3.141592 65462;</span><br><span class="line">float a = 3.141592 65462;</span><br><span class="line">printf(&quot;%.8lf\n&quot;); // 3.141592 65</span><br><span class="line">printf(&quot;%.8f\n&quot;); // 3.141592 74</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;float保证精度到小数点后6位&quot;&gt;&lt;a href=&quot;#float保证精度到小数点后6位&quot; class=&quot;headerlink&quot; title=&quot;float保证精度到小数点后6位&quot;&gt;&lt;/a&gt;float保证精度到小数点后6位&lt;/h2&gt;&lt;h2 id=&quot;double保证精</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>进制</title>
    <link href="https://cccckv.github.io/blog/2022/03/21/%E8%BF%9B%E5%88%B6/"/>
    <id>https://cccckv.github.io/blog/2022/03/21/%E8%BF%9B%E5%88%B6/</id>
    <published>2022-03-21T06:18:35.000Z</published>
    <updated>2022-03-21T07:19:26.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机存储的八进制、十六进制都以补码存入。（正数补码、反码、原码同）"><a href="#计算机存储的八进制、十六进制都以补码存入。（正数补码、反码、原码同）" class="headerlink" title="计算机存储的八进制、十六进制都以补码存入。（正数补码、反码、原码同）"></a>计算机存储的八进制、十六进制都以补码存入。（正数补码、反码、原码同）</h2><h5 id="输出将输出源码值"><a href="#输出将输出源码值" class="headerlink" title="输出将输出源码值"></a>输出将输出源码值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">char a = 0x81; //转二进制 1000 0001 -&gt; 1111 1110 -&gt; 1111 1111</span><br><span class="line">printf(&quot;a=%d\n&quot;,a);</span><br><span class="line">输出：a=-127</span><br><span class="line"></span><br><span class="line">char b = 025; //转二进制 00 010 101</span><br><span class="line">printf(&quot;a=%d\n&quot;,a);</span><br><span class="line">输出：b=21</span><br><span class="line"></span><br><span class="line">char c = 071; //转二进制 00 111 001</span><br><span class="line">printf(&quot;c=%d\n&quot;,c);</span><br><span class="line">输出：c=57</span><br><span class="line"></span><br><span class="line">char d = 0353; // 000 011 101 011-&gt;1110 1011 (负数)</span><br><span class="line">printf(&quot;d=%d\n&quot;,d);//取反-&gt;1001 0100 -&gt;加一 1001 0101</span><br><span class="line">输出：d=-21</span><br></pre></td></tr></table></figure><h2 id="unsigned-无符号只表示正数-正数补码、反码、原码同"><a href="#unsigned-无符号只表示正数-正数补码、反码、原码同" class="headerlink" title="unsigned(无符号只表示正数,正数补码、反码、原码同)"></a>unsigned(无符号只表示正数,正数补码、反码、原码同)</h2><h3 id="由char转换到int需要提升24位-如果是unsigned-char-前面24位全部补0-如果是signed-char-前面24位全部补符号位-即本来char的最高位"><a href="#由char转换到int需要提升24位-如果是unsigned-char-前面24位全部补0-如果是signed-char-前面24位全部补符号位-即本来char的最高位" class="headerlink" title="由char转换到int需要提升24位.如果是unsigned char,前面24位全部补0.如果是signed char,前面24位全部补符号位(即本来char的最高位"></a>由char转换到int需要提升24位.如果是unsigned char,前面24位全部补0.如果是signed char,前面24位全部补符号位(即本来char的最高位</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">char a = 0x81;  </span><br><span class="line">printf(&quot;a=%d\n&quot;,a); // 1000 0001 -&gt; 1111 1110 -&gt; 1111 1111</span><br><span class="line">printf(&quot;a=%u\n&quot;,a); // 1000 0001 char 转 int =&gt; 1111 1111 1111 1111 1111 1111 1000 0001</span><br><span class="line"></span><br><span class="line">unsigned char a = 0x81; </span><br><span class="line">printf(&quot;a=%d\n&quot;,a); // 1000 0001</span><br><span class="line">printf(&quot;a=%u\n&quot;,a); // 1000 0001 unsigned char 转 int =&gt; 0000 0000 0000 0000 0000 0000 1000 0001</span><br></pre></td></tr></table></figure><h3 id="十六进制和八进制互转都先转成二进制"><a href="#十六进制和八进制互转都先转成二进制" class="headerlink" title="十六进制和八进制互转都先转成二进制"></a>十六进制和八进制互转都先转成二进制</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;计算机存储的八进制、十六进制都以补码存入。（正数补码、反码、原码同）&quot;&gt;&lt;a href=&quot;#计算机存储的八进制、十六进制都以补码存入。（正数补码、反码、原码同）&quot; class=&quot;headerlink&quot; title=&quot;计算机存储的八进制、十六进制都以补码存入。（正数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++编译步骤</title>
    <link href="https://cccckv.github.io/blog/2022/03/18/c-%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4/"/>
    <id>https://cccckv.github.io/blog/2022/03/18/c-%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4/</id>
    <published>2022-03-18T06:57:13.000Z</published>
    <updated>2022-03-18T06:57:38.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="c语言的编译步骤"><a href="#c语言的编译步骤" class="headerlink" title="c语言的编译步骤"></a>c语言的编译步骤</h2><h3 id="1-预处理"><a href="#1-预处理" class="headerlink" title="1.预处理"></a>1.预处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -E hello.c -o hello.i</span><br></pre></td></tr></table></figure><h5 id="1）带-的语句为预处理指令，在预处理的时候处理了。"><a href="#1）带-的语句为预处理指令，在预处理的时候处理了。" class="headerlink" title="1）带#的语句为预处理指令，在预处理的时候处理了。"></a>1）带#的语句为预处理指令，在预处理的时候处理了。</h5><h5 id="2）头文件展开-include-lt-stdio-h-gt-预处理时将stdio-h文件拷贝至预处理文件中"><a href="#2）头文件展开-include-lt-stdio-h-gt-预处理时将stdio-h文件拷贝至预处理文件中" class="headerlink" title="2）头文件展开: #include &lt;stdio.h&gt; 预处理时将stdio.h文件拷贝至预处理文件中"></a>2）头文件展开: #include &lt;stdio.h&gt; 预处理时将stdio.h文件拷贝至预处理文件中</h5><h5 id="3）删除注释"><a href="#3）删除注释" class="headerlink" title="3）删除注释"></a>3）删除注释</h5><h5 id="4）宏替换：-define-PI-3-14-代表声明宏，预处理时会将宏替代"><a href="#4）宏替换：-define-PI-3-14-代表声明宏，预处理时会将宏替代" class="headerlink" title="4）宏替换：#define PI 3.14 代表声明宏，预处理时会将宏替代"></a>4）宏替换：#define PI 3.14 代表声明宏，预处理时会将宏替代</h5><h5 id="5）预处理不检查语法错误"><a href="#5）预处理不检查语法错误" class="headerlink" title="5）预处理不检查语法错误"></a>5）预处理不检查语法错误</h5><h5 id="6）条件编译-if-0-gt-endif-（条件不成立不进行预处理）"><a href="#6）条件编译-if-0-gt-endif-（条件不成立不进行预处理）" class="headerlink" title="6）条件编译 #if 0 -&gt; endif （条件不成立不进行预处理）"></a>6）条件编译 #if 0 -&gt; endif （条件不成立不进行预处理）</h5><h3 id="2-编译"><a href="#2-编译" class="headerlink" title="2.编译"></a>2.编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S hello.i -o hello.s</span><br></pre></td></tr></table></figure><h5 id="1）将预处理文件编译生成汇编文件"><a href="#1）将预处理文件编译生成汇编文件" class="headerlink" title="1）将预处理文件编译生成汇编文件"></a>1）将预处理文件编译生成汇编文件</h5><h5 id="2）检查语法错误"><a href="#2）检查语法错误" class="headerlink" title="2）检查语法错误"></a>2）检查语法错误</h5><h3 id="3-汇编"><a href="#3-汇编" class="headerlink" title="3.汇编"></a>3.汇编</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c hello.s -c hello.o</span><br></pre></td></tr></table></figure><h5 id="将汇编文件编译生成二进制文件"><a href="#将汇编文件编译生成二进制文件" class="headerlink" title="将汇编文件编译生成二进制文件"></a>将汇编文件编译生成二进制文件</h5><h3 id="4-链接"><a href="#4-链接" class="headerlink" title="4.链接"></a>4.链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.o -c hello.exe</span><br></pre></td></tr></table></figure><h5 id="设置运行环境，堆栈等，链接其他库"><a href="#设置运行环境，堆栈等，链接其他库" class="headerlink" title="设置运行环境，堆栈等，链接其他库"></a>设置运行环境，堆栈等，链接其他库</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;c语言的编译步骤&quot;&gt;&lt;a href=&quot;#c语言的编译步骤&quot; class=&quot;headerlink&quot; title=&quot;c语言的编译步骤&quot;&gt;&lt;/a&gt;c语言的编译步骤&lt;/h2&gt;&lt;h3 id=&quot;1-预处理&quot;&gt;&lt;a href=&quot;#1-预处理&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>整数反转</title>
    <link href="https://cccckv.github.io/blog/2022/02/27/leetcode_%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <id>https://cccckv.github.io/blog/2022/02/27/leetcode_%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</id>
    <published>2022-02-27T07:24:29.000Z</published>
    <updated>2022-02-27T07:43:13.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题干-–leetcode"><a href="#题干-–leetcode" class="headerlink" title="题干 –leetcode"></a>题干 –leetcode</h2><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</p><p>假设环境不允许存储 64 位整数（有符号或无符号）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 123</span><br><span class="line">输出：321</span><br></pre></td></tr></table></figure><h2 id="理解-："><a href="#理解-：" class="headerlink" title="理解 ："></a>理解 ：</h2><h4 id="取出x最后一位数-last-x-10-作为反转整数（result）下一位-result-result-10-last；"><a href="#取出x最后一位数-last-x-10-作为反转整数（result）下一位-result-result-10-last；" class="headerlink" title="取出x最后一位数 last = x%10,  作为反转整数（result）下一位 result = result * 10 + last；"></a>取出x最后一位数 last = x%10,  作为反转整数（result）下一位 result = result * 10 + last；</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int reverse(int x)&#123;</span><br><span class="line">        int result = 0;</span><br><span class="line">        while (x != 0)&#123;</span><br><span class="line">            int last = x % 10;</span><br><span class="line">            x /= 10;</span><br><span class="line">            result = result * 10 + last;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="要求反转后整数超过-32-位的有符号整数的范围-−231-231-−-1-，就返回-0。"><a href="#要求反转后整数超过-32-位的有符号整数的范围-−231-231-−-1-，就返回-0。" class="headerlink" title="要求反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。"></a>要求反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (result &lt; Integer.MIN_VALUE / 10 || result &gt; Integer.MAX_VALUE / 10) &#123;</span><br><span class="line">                <span class="built_in">return</span> 0;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h2 id="最终题解："><a href="#最终题解：" class="headerlink" title="最终题解："></a>最终题解：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int reverse(int x)&#123;</span><br><span class="line">        int result = 0;</span><br><span class="line">        <span class="keyword">while</span> (x != 0)&#123;</span><br><span class="line">            <span class="keyword">if</span> (result &lt; Integer.MIN_VALUE / 10 || result &gt; Integer.MAX_VALUE / 10) &#123; //反转值若超出数值大小1/10 ，则内存溢出</span><br><span class="line">                <span class="built_in">return</span> 0;</span><br><span class="line">            &#125;</span><br><span class="line">            int last = x % 10;</span><br><span class="line">            x /= 10;</span><br><span class="line">            result = result * 10 + dict;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><h4 id="int-数据类型是32位、有符号的以二进制补码表示的整数；"><a href="#int-数据类型是32位、有符号的以二进制补码表示的整数；" class="headerlink" title="int 数据类型是32位、有符号的以二进制补码表示的整数；"></a>int 数据类型是32位、有符号的以二进制补码表示的整数；</h4><h4 id="最小值是-2-147-483-648（-2-31）；"><a href="#最小值是-2-147-483-648（-2-31）；" class="headerlink" title="最小值是 -2,147,483,648（-2^31）；"></a>最小值是 -2,147,483,648（-2^31）；</h4><h4 id="最大值是-2-147-483-647（2-31-1）；"><a href="#最大值是-2-147-483-647（2-31-1）；" class="headerlink" title="最大值是 2,147,483,647（2^31 - 1）；"></a>最大值是 2,147,483,647（2^31 - 1）；</h4><h4 id="一般地整型变量默认为-int-类型；"><a href="#一般地整型变量默认为-int-类型；" class="headerlink" title="一般地整型变量默认为 int 类型；"></a>一般地整型变量默认为 int 类型；</h4><h4 id="默认值是-0-；"><a href="#默认值是-0-；" class="headerlink" title="默认值是 0 ；"></a>默认值是 0 ；</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题干-–leetcode&quot;&gt;&lt;a href=&quot;#题干-–leetcode&quot; class=&quot;headerlink&quot; title=&quot;题干 –leetcode&quot;&gt;&lt;/a&gt;题干 –leetcode&lt;/h2&gt;&lt;p&gt;给你一个 32 位的有符号整数 x ，返回将 x 中的数字部</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode 217 存在重复元素 （含Map-Set）</title>
    <link href="https://cccckv.github.io/blog/2022/02/21/Set-Map/"/>
    <id>https://cccckv.github.io/blog/2022/02/21/Set-Map/</id>
    <published>2022-02-21T08:02:44.000Z</published>
    <updated>2022-02-21T10:16:55.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="给你一个整数数组-nums-。如果任一值在数组中出现-至少两次-，返回-true-；如果数组中每个元素互不相同，返回-false-。"><a href="#给你一个整数数组-nums-。如果任一值在数组中出现-至少两次-，返回-true-；如果数组中每个元素互不相同，返回-false-。" class="headerlink" title="给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。"></a>给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4]</span><br><span class="line">输出：<span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="同LeetCode-1-两数之和使用Map处理"><a href="#同LeetCode-1-两数之和使用Map处理" class="headerlink" title="同LeetCode 1 两数之和使用Map处理"></a>同LeetCode 1 两数之和使用Map处理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Sloution &#123;</span><br><span class="line">  public boolean containsDuplicate(int[] nums)&#123;</span><br><span class="line">  Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">  int index = 0;</span><br><span class="line">  foreach(int num : nums)&#123;</span><br><span class="line">  <span class="keyword">if</span> (map.containsValue(num))&#123;</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  map.put(index,num);</span><br><span class="line">  &#125;</span><br><span class="line">  index++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果-：-代码执行通过，但超出时间限制"><a href="#结果-：-代码执行通过，但超出时间限制" class="headerlink" title="结果 ： 代码执行通过，但超出时间限制"></a>结果 ： 代码执行通过，但超出时间限制</h5><h4 id="无序使用Set处理"><a href="#无序使用Set处理" class="headerlink" title="无序使用Set处理"></a>无序使用Set处理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Sloution &#123;</span><br><span class="line">  public boolean containsDuplicate(int[] nums)&#123;</span><br><span class="line">  Set&lt;Integer&gt; <span class="built_in">set</span> = new HashSet&lt;&gt;();</span><br><span class="line">  foreach(int num : nums)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!set.add(num)) <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果-：-通过"><a href="#结果-：-通过" class="headerlink" title="结果 ： 通过"></a>结果 ： 通过</h5><h4 id="排序后遍历"><a href="#排序后遍历" class="headerlink" title="排序后遍历"></a>排序后遍历</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public boolean containsDuplicate(int[] nums) &#123;</span><br><span class="line">       Arrays.sort(nums);</span><br><span class="line">       <span class="keyword">for</span>(int i = 0;i &lt; nums.length-1; i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[i]==nums[i+1])&#123;</span><br><span class="line">               <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果-：-通过，用时较长"><a href="#结果-：-通过，用时较长" class="headerlink" title="结果 ： 通过，用时较长"></a>结果 ： 通过，用时较长</h5><h3 id="总结-："><a href="#总结-：" class="headerlink" title="总结 ："></a>总结 ：</h3><h5 id="Set是集合的数据结构，Map是字典的数据结构"><a href="#Set是集合的数据结构，Map是字典的数据结构" class="headerlink" title="Set是集合的数据结构，Map是字典的数据结构"></a>Set是集合的数据结构，Map是字典的数据结构</h5><h5 id="1-Set中元素唯一，数组存入后自动排序。"><a href="#1-Set中元素唯一，数组存入后自动排序。" class="headerlink" title="1 Set中元素唯一，数组存入后自动排序。"></a>1 Set中元素唯一，数组存入后自动排序。</h5><h6 id="1-1-加入Set的元素必须定义equals-方法以确保对象的唯一性。"><a href="#1-1-加入Set的元素必须定义equals-方法以确保对象的唯一性。" class="headerlink" title="1.1 加入Set的元素必须定义equals()方法以确保对象的唯一性。"></a>1.1 加入Set的元素必须定义equals()方法以确保对象的唯一性。</h6><h6 id="1-2-HashSet是为快速查找而设计的，它对速度进行了优化，存入HashSet的元素必须定义hashCode-方法"><a href="#1-2-HashSet是为快速查找而设计的，它对速度进行了优化，存入HashSet的元素必须定义hashCode-方法" class="headerlink" title="1.2 HashSet是为快速查找而设计的，它对速度进行了优化，存入HashSet的元素必须定义hashCode()方法"></a>1.2 HashSet是为快速查找而设计的，它对速度进行了优化，存入HashSet的元素必须定义hashCode()方法</h6><h5 id="Map-无序、以键值对的形式添加元素，键不能重复，值可以重复它没有继承Collection接口"><a href="#Map-无序、以键值对的形式添加元素，键不能重复，值可以重复它没有继承Collection接口" class="headerlink" title="Map 无序、以键值对的形式添加元素，键不能重复，值可以重复它没有继承Collection接口"></a>Map 无序、以键值对的形式添加元素，键不能重复，值可以重复它没有继承Collection接口</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;给你一个整数数组-nums-。如果任一值在数组中出现-至少两次-，返回-true-；如果数组中每个元素互不相同，返回-false-。&quot;&gt;&lt;a href=&quot;#给你一个整数数组-nums-。如果任一值在数组中出现-至少两次-，返回-true-；如果数组中每个元素互不相</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git使用</title>
    <link href="https://cccckv.github.io/blog/2022/02/09/git%E4%BD%BF%E7%94%A8/"/>
    <id>https://cccckv.github.io/blog/2022/02/09/git%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-09T07:49:24.000Z</published>
    <updated>2022-02-09T08:00:16.892Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><h4 id="githun-io"><a href="#githun-io" class="headerlink" title="***.githun.io"></a>***.githun.io</h4><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><h3 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/. ssh <span class="comment">#检查是否已存在ssh密匙</span></span><br><span class="line">$ ssh -keygen -t rsa -C <span class="string">&quot;邮箱地址&quot;</span> <span class="comment"># ***@163.com</span></span><br></pre></td></tr></table></figure><p>在C:\Users\Administrator.ssh 下复制id_rsa.pub中密匙到<br>github 中 setting -&gt; SSH and GPG keys -&gt; New SSH key 配置</p><h3 id="测试ssh"><a href="#测试ssh" class="headerlink" title="测试ssh"></a>测试ssh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试是否成功</span></span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line"><span class="comment"># 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</span></span><br><span class="line"></span><br><span class="line">Hi liuxianan! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 看到这个信息说明SSH已配置成功！</span></span><br></pre></td></tr></table></figure><h3 id="配置绑定github用户"><a href="#配置绑定github用户" class="headerlink" title="配置绑定github用户"></a>配置绑定github用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;用户名&quot;</span> <span class="comment">#github用户名</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;***@163.com&quot;</span> <span class="comment">#邮箱地址 ***@163.com</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;创建仓库&quot;&gt;&lt;a href=&quot;#创建仓库&quot; class=&quot;headerlink&quot; title=&quot;创建仓库&quot;&gt;&lt;/a&gt;创建仓库&lt;/h3&gt;&lt;h4 id=&quot;githun-io&quot;&gt;&lt;a href=&quot;#githun-io&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>集合处理</title>
    <link href="https://cccckv.github.io/blog/2022/02/09/%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/"/>
    <id>https://cccckv.github.io/blog/2022/02/09/%E9%9B%86%E5%90%88%E5%A4%84%E7%90%86/</id>
    <published>2022-02-09T06:33:29.000Z</published>
    <updated>2022-02-09T07:11:02.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合处理"><a href="#集合处理" class="headerlink" title="集合处理"></a>集合处理</h2><h3 id="1-关于-hashCode-和-equals-的处理，遵循如下规则："><a href="#1-关于-hashCode-和-equals-的处理，遵循如下规则：" class="headerlink" title="1.关于 hashCode 和 equals 的处理，遵循如下规则："></a>1.关于 hashCode 和 equals 的处理，遵循如下规则：</h3><p>1） 只要重写 equals，就必须重写 hashCode。<br>2） 因为 Set 存储的是不重复的对象，依据 hashCode 和 equals 进行判断，所以 Set 存储的对象必须重写这两个方法。<br>3） 如果自定义对象作为 Map 的键，那么必须覆写 hashCode 和 equals。</p><h3 id="2-判断所有集合内部的元素是否为空，使用-isEmpty-方法，而不是-size-0-的方式。"><a href="#2-判断所有集合内部的元素是否为空，使用-isEmpty-方法，而不是-size-0-的方式。" class="headerlink" title="2.判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。"></a>2.判断所有集合内部的元素是否为空，使用 isEmpty()方法，而不是 size()==0 的方式。</h3><h3 id="3-使用-Map-的方法-keySet-values-entrySet-返回集合对象时，不可以对其进行添加元素操作，否则会抛出-UnsupportedOperationException-异常"><a href="#3-使用-Map-的方法-keySet-values-entrySet-返回集合对象时，不可以对其进行添加元素操作，否则会抛出-UnsupportedOperationException-异常" class="headerlink" title="3.使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添加元素操作，否则会抛出 UnsupportedOperationException 异常"></a>3.使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添加元素操作，否则会抛出 UnsupportedOperationException 异常</h3><h3 id="4-使用集合转数组的方法，必须使用集合的-toArray-T-array-，传入的是类型完全一致、长度为-0-的空数组。"><a href="#4-使用集合转数组的方法，必须使用集合的-toArray-T-array-，传入的是类型完全一致、长度为-0-的空数组。" class="headerlink" title="4.使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。"></a>4.使用集合转数组的方法，必须使用集合的 toArray(T[] array)，传入的是类型完全一致、长度为 0 的空数组。</h3><p>使用 toArray 带参方法，数组空间大小的 length，<br>1） 等于 0，动态创建与 size 相同的数组，性能最好。<br>2） 大于 0 但小于 size，重新创建大小等于 size 的数组，增加 GC 负担。<br>3） 等于 size，在高并发情况下，数组创建完成之后，size 正在变大的情况下，负面影响与 2 相同。<br>4） 大于 size，空间浪费，且在 size 处插入 null 值，存在 NPE 隐患。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;(2);</span><br><span class="line">list.add(&quot;guan&quot;);</span><br><span class="line">list.add(&quot;bao&quot;);</span><br><span class="line">String[] array = list.toArray(new String[0]);</span><br></pre></td></tr></table></figure><h3 id="5-在使用-Collection-接口任何实现类的-addAll-方法时，都要对输入的集合参数进行-NPE-判断。"><a href="#5-在使用-Collection-接口任何实现类的-addAll-方法时，都要对输入的集合参数进行-NPE-判断。" class="headerlink" title="5.在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行 NPE 判断。"></a>5.在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行 NPE 判断。</h3><p>在 ArrayList#addAll 方法的第一行代码即 Object[] a = c.toArray(); 其中 c 为输入集合参数，如果<br>为 null，则直接抛出异常。</p><h3 id="6-泛型通配符"><a href="#6-泛型通配符" class="headerlink" title="6.泛型通配符"></a>6.泛型通配符</h3><p>泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法， 而&lt;? super T&gt;不能使用 get 方法，两者在接口调用赋值的场景中容易出错。<br>说明：扩展说一下 PECS(Producer Extends Consumer Super)原则：第一、频繁往外读取内容的，适合用<br>&lt;? extends T&gt;。第二、经常往里插入的，适合用&lt;? super T</p><h3 id="7-不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-Iterator方式，如果并发操作，需要对-Iterator-对象加锁"><a href="#7-不要在-foreach-循环里进行元素的-remove-add-操作。remove-元素请使用-Iterator方式，如果并发操作，需要对-Iterator-对象加锁" class="headerlink" title="7.不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁"></a>7.不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需要对 Iterator 对象加锁</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(&quot;1&quot;);</span><br><span class="line">list.add(&quot;2&quot;);</span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">String item = iterator.next();</span><br><span class="line">if (删除元素的条件) &#123;</span><br><span class="line">iterator.remove();</span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><h3 id="8-使用-entrySet-遍历-Map-类集合-KV，而不是-keySet-方式进行遍历。"><a href="#8-使用-entrySet-遍历-Map-类集合-KV，而不是-keySet-方式进行遍历。" class="headerlink" title="8.使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。"></a>8.使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。</h3><p>说明：<br>keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出 key 所对应的<br>value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用<br>Map.forEach 方法。<br>正例：<br>values()返回的是 V 值集合，是一个 list 集合对象；<br>keySet()返回的是 K 值集合，是一个 Set 集合对<br>象；entrySet()返回的是 K-V 值组合集合。</p><h3 id="9-高度注意-Map-类集合-K-V-能不能存储-null-值的情况，如下表格："><a href="#9-高度注意-Map-类集合-K-V-能不能存储-null-值的情况，如下表格：" class="headerlink" title="9.高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格："></a>9.高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格：</h3><p><img src="/blog/img/map_K_V.png" alt="avatar"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;集合处理&quot;&gt;&lt;a href=&quot;#集合处理&quot; class=&quot;headerlink&quot; title=&quot;集合处理&quot;&gt;&lt;/a&gt;集合处理&lt;/h2&gt;&lt;h3 id=&quot;1-关于-hashCode-和-equals-的处理，遵循如下规则：&quot;&gt;&lt;a href=&quot;#1-关于-hashCo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java移位运算符</title>
    <link href="https://cccckv.github.io/blog/2022/01/17/Java%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://cccckv.github.io/blog/2022/01/17/Java%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2022-01-17T08:02:44.000Z</published>
    <updated>2022-01-17T09:05:36.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="左移运算符-lt-lt-左移运算符，将运算符左边的对象向左移动运算符右边指定的位数（在低位补0）"><a href="#左移运算符-lt-lt-左移运算符，将运算符左边的对象向左移动运算符右边指定的位数（在低位补0）" class="headerlink" title="左移运算符 &lt;&lt;  (左移运算符，将运算符左边的对象向左移动运算符右边指定的位数（在低位补0）)"></a>左移运算符 &lt;&lt;  (左移运算符，将运算符左边的对象向左移动运算符右边指定的位数（在低位补0）)</h2><h3 id="通用格式"><a href="#通用格式" class="headerlink" title="通用格式"></a>通用格式</h3><p>value &lt;&lt; num<br>num 指定要移位值value 移动的位数。<br>左移的规则只记住一点：丢弃最高位，0补最低位<br>如果移动的位数超过了该类型的最大位数，那么编译器会对移动的位数取模。如对int型移动33位，实际上只移动了1位。</p><h3 id="运算规则"><a href="#运算规则" class="headerlink" title="运算规则"></a>运算规则</h3><p>按二进制形式把所有的数字向左移动对应的位数，高位移出(舍弃)，低位的空位补零。<br>当左移的运算数是int 类型时，每移动1位它的第31位就要被移出并且丢弃；<br>当左移的运算数是long 类型时，每移动1位它的第63位就要被移出并且丢弃。<br>当左移的运算数是byte 和short类型时，将自动把这些类型扩大为 int 型。</p><h3 id="计算-数学上：3-lt-lt-2-3-2-2"><a href="#计算-数学上：3-lt-lt-2-3-2-2" class="headerlink" title="计算  (数学上：3&lt;&lt;2  =  3*2^2)"></a>计算  (数学上：3&lt;&lt;2  =  3*2^2)</h3><p>5 &lt;&lt; 1  （5左移1位）(5*2^1)<br>5 =&gt; (二进制)  0000 0000 0000 0000 0000 0000 0000 0101<br>左移后 =&gt; 0000 0000 0000 0000 0000 0000 0000 1010<br>数学上：2^3+2^1 = 10 </p><h2 id="右移运算符-gt-gt-（有符号-右移运算符，将运算符左边的对象向右移动运算符右边指定的位数。使用符号扩展机制，也就是说，如果值为正，则在高位补0，如果值为负，则在高位补1-）"><a href="#右移运算符-gt-gt-（有符号-右移运算符，将运算符左边的对象向右移动运算符右边指定的位数。使用符号扩展机制，也就是说，如果值为正，则在高位补0，如果值为负，则在高位补1-）" class="headerlink" title="右移运算符 &gt;&gt; （有符号 右移运算符，将运算符左边的对象向右移动运算符右边指定的位数。使用符号扩展机制，也就是说，如果值为正，则在高位补0，如果值为负，则在高位补1.）"></a>右移运算符 &gt;&gt; （有符号 右移运算符，将运算符左边的对象向右移动运算符右边指定的位数。使用符号扩展机制，也就是说，如果值为正，则在高位补0，如果值为负，则在高位补1.）</h2><h3 id="通用格式-1"><a href="#通用格式-1" class="headerlink" title="通用格式"></a>通用格式</h3><p>value &lt;&lt; num<br>num 指定要移位值value 移动的位数。<br>丢弃最低位，值正高位补0，值负高位补1</p><h3 id="计算-数学上：3-gt-gt-2-3-2-2"><a href="#计算-数学上：3-gt-gt-2-3-2-2" class="headerlink" title="计算  (数学上：3&gt;&gt;2  =  3/2^2)"></a>计算  (数学上：3&gt;&gt;2  =  3/2^2)</h3><p>5 &gt;&gt; 1  （5右移1位）(5/2^1)<br>5 =&gt; (二进制)  0000 0000 0000 0000 0000 0000 0000 0101<br>右移后 =&gt; 0000 0000 0000 0000 0000 0000 0000 0010<br>数学上：2<br>-5 &gt;&gt; 1<br>-5 =&gt; (二进制)  1111 1111 1111 1111 1111 1111 1111 1011<br>右移后 =&gt; 1111 1111 1111 1111 1111 1111 1111 1101  (转十进制：先去除补码 即-1，1111 1111 1111 1111 1111 1111 1111 1100 –&gt; 反码：0000 0000 0000 0000 0000 0000 0000 0011 = 3 因为值为负数 所以最后所得值为-3)</p><p>负数二进制的转换 （二进制的正负要看他储存在计算机中是以有符号进行存储还是无符号进行存储）<br>0000 0000 0000 0000 0000 0000 0000 0101 –&gt;取反码得 –&gt;1111 1111 1111 1111 1111 1111 1111 1010<br>再补码 –&gt;1111 1111 1111 1111 1111 1111 1111 1011 即为-5得二进制值</p><h2 id="无符号右移（无符号右移规则和右移运算是一样的，只是填充时不管左边的数字是正是负都用0来填充，无符号右移运算只针对负数计算，因为对于正数来说这种运算没有意义）"><a href="#无符号右移（无符号右移规则和右移运算是一样的，只是填充时不管左边的数字是正是负都用0来填充，无符号右移运算只针对负数计算，因为对于正数来说这种运算没有意义）" class="headerlink" title="无符号右移（无符号右移规则和右移运算是一样的，只是填充时不管左边的数字是正是负都用0来填充，无符号右移运算只针对负数计算，因为对于正数来说这种运算没有意义）"></a>无符号右移（无符号右移规则和右移运算是一样的，只是填充时不管左边的数字是正是负都用0来填充，无符号右移运算只针对负数计算，因为对于正数来说这种运算没有意义）</h2><p>无符号右移运算符 &gt;&gt;&gt;<br>它的通用格式如下所示：<br>value &gt;&gt;&gt; num<br>num 指定要移位值value 移动的位数。<br>无符号右移的规则只记住一点：忽略了符号位扩展，0补最高位</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;左移运算符-lt-lt-左移运算符，将运算符左边的对象向左移动运算符右边指定的位数（在低位补0）&quot;&gt;&lt;a href=&quot;#左移运算符-lt-lt-左移运算符，将运算符左边的对象向左移动运算符右边指定的位数（在低位补0）&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ArrayList and Vector and LinkedList</title>
    <link href="https://cccckv.github.io/blog/2022/01/17/ArrayList-and-Vector-and-LinkedList/"/>
    <id>https://cccckv.github.io/blog/2022/01/17/ArrayList-and-Vector-and-LinkedList/</id>
    <published>2022-01-17T07:04:22.000Z</published>
    <updated>2022-03-18T06:35:38.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要讲已经有数组的数据复制到新的存储空间中。<br>当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//构造一个具有指定初始容量的空列表</span><br><span class="line">public ArrayList(intinitialCapacity)</span><br><span class="line">//构造一个初始容量为 10 的空列表</span><br><span class="line">public ArrayList()</span><br><span class="line"></span><br><span class="line">//构造一个包含指定 collection 的元素的列表</span><br><span class="line">public ArrayList(Collection&lt;? extends E&gt; c)</span><br></pre></td></tr></table></figure><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//使用指定的初始容量和等于零的容量增量构造一个空向量</span><br><span class="line">public Vector() </span><br><span class="line">//构造一个空向量，使其内部数据数组的大小，其标准容量增量为零。</span><br><span class="line">public Vector(int initialCapacity) </span><br><span class="line">//构造一个包含指定 collection 中的元素的向量</span><br><span class="line">public Vector(Collection&lt;? extends E&gt; c)</span><br><span class="line"></span><br><span class="line">//使用指定的初始容量和容量增量构造一个空的向量</span><br><span class="line">public Vector(int initialCapacity, int capacityIncrement)</span><br></pre></td></tr></table></figure><h2 id="ArrayList-And-Vector-Vector-线程安全-性能上一般较差"><a href="#ArrayList-And-Vector-Vector-线程安全-性能上一般较差" class="headerlink" title="ArrayList And Vector (Vector 线程安全 性能上一般较差)"></a>ArrayList And Vector (Vector 线程安全 性能上一般较差)</h2><ol><li>vector是线程（Thread）同步（Synchronized）的，所以它也是线程安全的，而Arraylist是线程异步（ASynchronized）的，是不安全的。<br>如果不考虑到线程的安全因素，一般用Arraylist效率比较高。</li><li>如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%,而arraylist增长率为目前数组长度<br>的50%.如过在集合中使用数据量比较大的数据，用vector有一定的优势。</li><li>如果查找一个指定位置的数据，vector和arraylist使用的时间是相同的，都是0(1),这个时候使用vector和arraylist都可以。</li><li>在插入方面ArrayList和Vector都是通过移动、复制来实现。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Appends the specified element to the end of this Vector.</span><br><span class="line"> *</span><br><span class="line"> * @param e element to be appended to this Vector</span><br><span class="line"> * @return &#123;@code true&#125; (as specified by &#123;@link Collection#add&#125;)</span><br><span class="line"> * @since 1.2</span><br><span class="line"> */</span><br><span class="line">public synchronized boolean add(E e) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + 1);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * Inserts the specified element at the specified position in this Vector.</span><br><span class="line"> * Shifts the element currently at that position (if any) and any</span><br><span class="line"> * subsequent elements to the right (adds one to their indices).</span><br><span class="line"> *</span><br><span class="line"> * @param index index at which the specified element is to be inserted</span><br><span class="line"> * @param element element to be inserted</span><br><span class="line"> * @throws ArrayIndexOutOfBoundsException if the index is out of range</span><br><span class="line"> *         (&#123;@code index &lt; 0 || index &gt; size()&#125;)</span><br><span class="line"> * @since 1.2</span><br><span class="line"> */</span><br><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    insertElementAt(element, index);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * Inserts the specified object as a component in this vector at the</span><br><span class="line"> * specified &#123;@code index&#125;. Each component in this vector with</span><br><span class="line"> * an index greater or equal to the specified &#123;@code index&#125; is</span><br><span class="line"> * shifted upward to have an index one greater than the value it had</span><br><span class="line"> * previously.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;The index must be a value greater than or equal to &#123;@code 0&#125;</span><br><span class="line"> * and less than or equal to the current size of the vector. (If the</span><br><span class="line"> * index is equal to the current size of the vector, the new element</span><br><span class="line"> * is appended to the Vector.)</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;This method is identical in functionality to the</span><br><span class="line"> * &#123;@link #add(int, Object) add(int, E)&#125;</span><br><span class="line"> * method (which is part of the &#123;@link List&#125; interface).  Note that the</span><br><span class="line"> * &#123;@code add&#125; method reverses the order of the parameters, to more closely</span><br><span class="line"> * match array usage.</span><br><span class="line"> *</span><br><span class="line"> * @param      obj     the component to insert</span><br><span class="line"> * @param      index   where to insert the new component</span><br><span class="line"> * @throws ArrayIndexOutOfBoundsException if the index is out of range</span><br><span class="line"> *         (&#123;@code index &lt; 0 || index &gt; size()&#125;)</span><br><span class="line"> */</span><br><span class="line">public synchronized void insertElementAt(E obj, int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    if (index &gt; elementCount) &#123;</span><br><span class="line">        throw new ArrayIndexOutOfBoundsException(index</span><br><span class="line">                                                 + &quot; &gt; &quot; + elementCount);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureCapacityHelper(elementCount + 1);</span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + 1, elementCount - index);</span><br><span class="line">    elementData[index] = obj;</span><br><span class="line">    elementCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Appends the specified element to the end of this list.</span><br><span class="line"> *</span><br><span class="line"> * @param e element to be appended to this list</span><br><span class="line"> * @return &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;@link Collection#add&#125;)</span><br><span class="line"> */</span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Inserts the specified element at the specified position in this</span><br><span class="line"> * list. Shifts the element currently at that position (if any) and</span><br><span class="line"> * any subsequent elements to the right (adds one to their indices).</span><br><span class="line"> *</span><br><span class="line"> * @param index index at which the specified element is to be inserted</span><br><span class="line"> * @param element element to be inserted</span><br><span class="line"> * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line"> */</span><br><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + 1,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Appends the specified element to the end of this list.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;This method is equivalent to &#123;@link #addLast&#125;.</span><br><span class="line"> *</span><br><span class="line"> * @param e element to be appended to this list</span><br><span class="line"> * @return &#123;@code true&#125; (as specified by &#123;@link Collection#add&#125;)</span><br><span class="line"> */</span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * Links e as last element.</span><br><span class="line"> */</span><br><span class="line">void linkLast(E e) &#123;</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class="line">    last = newNode;</span><br><span class="line">    if (l == null)</span><br><span class="line">        first = newNode;</span><br><span class="line">    else</span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * Inserts the specified element at the specified position in this list.</span><br><span class="line"> * Shifts the element currently at that position (if any) and any</span><br><span class="line"> * subsequent elements to the right (adds one to their indices).</span><br><span class="line"> *</span><br><span class="line"> * @param index index at which the specified element is to be inserted</span><br><span class="line"> * @param element element to be inserted</span><br><span class="line"> * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line"> */</span><br><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    if (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    else</span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * Inserts element e before non-null Node succ.</span><br><span class="line"> */</span><br><span class="line">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">    // assert succ != null;</span><br><span class="line">    final Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    if (pred == null)</span><br><span class="line">        first = newNode;</span><br><span class="line">    else</span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * Returns the (non-null) Node at the specified element index.</span><br><span class="line"> */</span><br><span class="line">Node&lt;E&gt; node(int index) &#123;</span><br><span class="line">    // assert isElementIndex(index);</span><br><span class="line"></span><br><span class="line">    if (index &lt; (size &gt;&gt; 1)) &#123;  </span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        for (int i = 0; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        for (int i = size - 1; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://cccckv.github.io/blog/2022/01/17/Java%E7%A7%BB%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6/">移位运算符&gt;&gt;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h2&gt;&lt;p&gt;ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>EasyGoHexo</title>
    <link href="https://cccckv.github.io/blog/2022/01/12/EasyGoHexo/"/>
    <id>https://cccckv.github.io/blog/2022/01/12/EasyGoHexo/</id>
    <published>2022-01-12T02:52:05.000Z</published>
    <updated>2022-02-09T08:02:36.755Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="BLOG"><a href="#BLOG" class="headerlink" title="BLOG"></a>BLOG</h2><h3 id="下载GIt、node-js、npm"><a href="#下载GIt、node-js、npm" class="headerlink" title="下载GIt、node.js、npm"></a>下载GIt、node.js、npm</h3><h3 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a>下载hexo</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="新建文件夹-Git-Bash-Here"><a href="#新建文件夹-Git-Bash-Here" class="headerlink" title="新建文件夹 Git Bash Here"></a>新建文件夹 Git Bash Here</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog --初始化创建blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install --安装hexo文件</span><br></pre></td></tr></table></figure><h3 id="一键三连起本地服务"><a href="#一键三连起本地服务" class="headerlink" title="一键三连起本地服务"></a>一键三连起本地服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:cccckv/blog.git</span> <span class="string">--仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://cccckv.github.io/blog/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog</span></span><br></pre></td></tr></table></figure><p>三连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h3 id="hexo-d-报错可能是为安装插件"><a href="#hexo-d-报错可能是为安装插件" class="headerlink" title="hexo d 报错可能是为安装插件"></a>hexo d 报错可能是为安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;BLOG&quot;&gt;&lt;a href=&quot;#BLOG&quot; class=&quot;headerlink&quot; title=&quot;BLOG&quot;&gt;&lt;/a&gt;BLOG&lt;/h2&gt;&lt;h3 id=&quot;下载GIt、node-js、npm&quot;&gt;&lt;a href=&quot;#下载GIt、node-js、npm&quot; clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cccckv.github.io/blog/2022/01/11/hello-world/"/>
    <id>https://cccckv.github.io/blog/2022/01/11/hello-world/</id>
    <published>2022-01-11T08:56:25.002Z</published>
    <updated>2022-01-11T08:56:25.002Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
