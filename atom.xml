<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The grave of brain cells</title>
  
  
  <link href="https://cccckv.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://cccckv.github.io/blog/"/>
  <updated>2022-01-17T07:49:11.081Z</updated>
  <id>https://cccckv.github.io/blog/</id>
  
  <author>
    <name>ccccckw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ArrayList and Vector and LinkedList</title>
    <link href="https://cccckv.github.io/blog/2022/01/17/ArrayList-and-Vector-and-LinkedList/"/>
    <id>https://cccckv.github.io/blog/2022/01/17/ArrayList-and-Vector-and-LinkedList/</id>
    <published>2022-01-17T07:04:22.000Z</published>
    <updated>2022-01-17T07:49:11.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要讲已经有数组的数据复制到新的存储空间中。<br>当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>Vector与ArrayList一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。</p><h2 id="ArrayList-And-Vector-Vector-线程安全-性能上一般较差"><a href="#ArrayList-And-Vector-Vector-线程安全-性能上一般较差" class="headerlink" title="ArrayList And Vector (Vector 线程安全 性能上一般较差)"></a>ArrayList And Vector (Vector 线程安全 性能上一般较差)</h2><ol><li><p>vector是线程（Thread）同步（Synchronized）的，所以它也是线程安全的，而Arraylist是线程异步（ASynchronized）的，是不安全的。<br>如果不考虑到线程的安全因素，一般用Arraylist效率比较高。</p></li><li><p>如果集合中的元素的数目大于目前集合数组的长度时，vector增长率为目前数组长度的100%,而arraylist增长率为目前数组长度<br>的50%.如过在集合中使用数据量比较大的数据，用vector有一定的优势。</p></li><li><p>如果查找一个指定位置的数据，vector和arraylist使用的时间是相同的，都是0(1),这个时候使用vector和arraylist都可以。</p></li><li><p>在插入方面ArrayList和Vector都是通过移动、复制来实现。<br>`` Vector–add<br> /**</p><ul><li>Appends the specified element to the end of this Vector.</li><li></li><li>@param e element to be appended to this Vector</li><li>@return {@code true} (as specified by {@link Collection#add})</li><li>@since 1.2</li><li>/<br>public synchronized boolean add(E e) {<br>  modCount++;<br>  ensureCapacityHelper(elementCount + 1);<br>  elementData[elementCount++] = e;<br>  return true;<br>}<br>/**</li><li>Inserts the specified element at the specified position in this Vector.</li><li>Shifts the element currently at that position (if any) and any</li><li>subsequent elements to the right (adds one to their indices).</li><li></li><li>@param index index at which the specified element is to be inserted</li><li>@param element element to be inserted</li><li>@throws ArrayIndexOutOfBoundsException if the index is out of range</li><li><pre><code>    (&#123;@code index &lt; 0 || index &gt; size()&#125;)</code></pre></li><li>@since 1.2</li><li>/<br>public void add(int index, E element) {<br>  insertElementAt(element, index);<br>}<br>/**</li><li>Inserts the specified object as a component in this vector at the</li><li>specified {@code index}. Each component in this vector with</li><li>an index greater or equal to the specified {@code index} is</li><li>shifted upward to have an index one greater than the value it had</li><li>previously.</li><li></li><li><p>The index must be a value greater than or equal to {@code 0}</li><li>and less than or equal to the current size of the vector. (If the</li><li>index is equal to the current size of the vector, the new element</li><li>is appended to the Vector.)</li><li></li><li><p>This method is identical in functionality to the</li><li>{@link #add(int, Object) add(int, E)}</li><li>method (which is part of the {@link List} interface).  Note that the</li><li>{@code add} method reverses the order of the parameters, to more closely</li><li>match array usage.</li><li></li><li>@param      obj     the component to insert</li><li>@param      index   where to insert the new component</li><li>@throws ArrayIndexOutOfBoundsException if the index is out of range</li><li><pre><code>    (&#123;@code index &lt; 0 || index &gt; size()&#125;)</code></pre></li><li>/<br>public synchronized void insertElementAt(E obj, int index) {<br>  modCount++;<br>  if (index &gt; elementCount) {<pre><code>  throw new ArrayIndexOutOfBoundsException(index                                           + &quot; &gt; &quot; + elementCount);</code></pre>  }<br>  ensureCapacityHelper(elementCount + 1);<br>  System.arraycopy(elementData, index, elementData, index + 1, elementCount - index);<br>  elementData[index] = obj;<br>  elementCount++;<br>}<br><code> </code> ArrayList<br>/**</li><li>Appends the specified element to the end of this list.</li><li></li><li>@param e element to be appended to this list</li><li>@return <tt>true</tt> (as specified by {@link Collection#add})</li><li>/<br>public boolean add(E e) {<br>  ensureCapacityInternal(size + 1);  // Increments modCount!!<br>  elementData[size++] = e;<br>  return true;<br>}</li></ul><p> /**</p><ul><li><p>Inserts the specified element at the specified position in this</p></li><li><p>list. Shifts the element currently at that position (if any) and</p></li><li><p>any subsequent elements to the right (adds one to their indices).</p></li><li></li><li><p>@param index index at which the specified element is to be inserted</p></li><li><p>@param element element to be inserted</p></li><li><p>@throws IndexOutOfBoundsException {@inheritDoc}</p></li><li><p>/<br>public void add(int index, E element) {<br>  rangeCheckForAdd(index);</p><p>  ensureCapacityInternal(size + 1);  // Increments modCount!!<br>  System.arraycopy(elementData, index, elementData, index + 1,</p><pre><code>               size - index);</code></pre><p>  elementData[index] = element;<br>  size++;<br>}<br>``</p></li></ul></li></ol><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。</p><p>`` LinkedList<br>    /**<br>     * Appends the specified element to the end of this list.<br>     *<br>     * <p>This method is equivalent to {@link #addLast}.<br>     *<br>     * @param e element to be appended to this list<br>     * @return {@code true} (as specified by {@link Collection#add})<br>     <em>/<br>    public boolean add(E e) {<br>        linkLast(e);<br>        return true;<br>    }<br>    /</em>*<br>     * Links e as last element.<br>     <em>/<br>    void linkLast(E e) {<br>        final Node<E> l = last;<br>        final Node<E> newNode = new Node&lt;&gt;(l, e, null);<br>        last = newNode;<br>        if (l == null)<br>            first = newNode;<br>        else<br>            l.next = newNode;<br>        size++;<br>        modCount++;<br>    }<br>    /</em>*<br>     * Inserts the specified element at the specified position in this list.<br>     * Shifts the element currently at that position (if any) and any<br>     * subsequent elements to the right (adds one to their indices).<br>     *<br>     * @param index index at which the specified element is to be inserted<br>     * @param element element to be inserted<br>     * @throws IndexOutOfBoundsException {@inheritDoc}<br>     */<br>    public void add(int index, E element) {<br>        checkPositionIndex(index);</p><pre><code>    if (index == size)        linkLast(element);    else        linkBefore(element, node(index));&#125;/** * Inserts element e before non-null Node succ. */void linkBefore(E e, Node&lt;E&gt; succ) &#123;    // assert succ != null;    final Node&lt;E&gt; pred = succ.prev;    final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ);    succ.prev = newNode;    if (pred == null)        first = newNode;    else        pred.next = newNode;    size++;    modCount++;&#125;/** * Returns the (non-null) Node at the specified element index. */Node&lt;E&gt; node(int index) &#123;    // assert isElementIndex(index);    if (index &lt; (size &gt;&gt; 1)) &#123;        Node&lt;E&gt; x = first;        for (int i = 0; i &lt; index; i++)            x = x.next;        return x;    &#125; else &#123;        Node&lt;E&gt; x = last;        for (int i = size - 1; i &gt; index; i--)            x = x.prev;        return x;    &#125;&#125;</code></pre><p>``</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h2&gt;&lt;p&gt;ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>EasyGoHexo</title>
    <link href="https://cccckv.github.io/blog/2022/01/12/EasyGoHexo/"/>
    <id>https://cccckv.github.io/blog/2022/01/12/EasyGoHexo/</id>
    <published>2022-01-12T02:52:05.000Z</published>
    <updated>2022-01-13T01:55:33.713Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="BLOG"><a href="#BLOG" class="headerlink" title="BLOG"></a>BLOG</h2><h3 id="下载GIt、node-js、npm"><a href="#下载GIt、node-js、npm" class="headerlink" title="下载GIt、node.js、npm"></a>下载GIt、node.js、npm</h3><h3 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a>下载hexo</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="新建文件夹-Git-Bash-Here"><a href="#新建文件夹-Git-Bash-Here" class="headerlink" title="新建文件夹 Git Bash Here"></a>新建文件夹 Git Bash Here</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog --初始化创建blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install --安装hexo文件</span><br></pre></td></tr></table></figure><h3 id="一键三连起本地服务"><a href="#一键三连起本地服务" class="headerlink" title="一键三连起本地服务"></a>一键三连起本地服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:cccckv/blog.git</span> <span class="string">--仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://cccckv.github.io/blog/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/blog</span></span><br></pre></td></tr></table></figure><p>三连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;BLOG&quot;&gt;&lt;a href=&quot;#BLOG&quot; class=&quot;headerlink&quot; title=&quot;BLOG&quot;&gt;&lt;/a&gt;BLOG&lt;/h2&gt;&lt;h3 id=&quot;下载GIt、node-js、npm&quot;&gt;&lt;a href=&quot;#下载GIt、node-js、npm&quot; clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cccckv.github.io/blog/2022/01/11/hello-world/"/>
    <id>https://cccckv.github.io/blog/2022/01/11/hello-world/</id>
    <published>2022-01-11T08:56:25.002Z</published>
    <updated>2022-01-11T08:56:25.002Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
